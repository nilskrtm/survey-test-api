"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.QuestionsRoutes = void 0;
const common_routes_config_1 = require("../common/common.routes.config");
const questions_middleware_1 = __importDefault(require("../questions/middleware/questions.middleware"));
const questions_controller_1 = __importDefault(require("./controllers/questions.controller"));
const paging_middleware_1 = __importDefault(require("../common/middleware/paging.middleware"));
const auth_middleware_1 = __importDefault(require("../auth/middleware/auth.middleware"));
const surveys_middleware_1 = __importDefault(require("../surveys/middleware/surveys.middleware"));
const permission_middleware_1 = __importDefault(require("../common/middleware/permission.middleware"));
const body_validation_middleware_1 = __importDefault(require("../common/middleware/body.validation.middleware"));
const express_validator_1 = require("express-validator");
const surveys_controller_1 = __importDefault(require("../surveys/controllers/surveys.controller"));
class QuestionsRoutes extends common_routes_config_1.CommonRoutesConfig {
    constructor(app) {
        super(app, 'QuestionsRoutes');
    }
    configureRoutes() {
        this.app
            .route(`/surveys/:surveyId/questions`)
            .get(auth_middleware_1.default.validAuthorizationNeeded(true, true), surveys_middleware_1.default.extractSurveyId, surveys_middleware_1.default.validateSurveyExists, permission_middleware_1.default.onlySurveyOwnerOrAdminCanDoThisAction, paging_middleware_1.default.dummyPagingParameters, questions_controller_1.default.listQuestions)
            .post(auth_middleware_1.default.validAuthorizationNeeded(true, false), surveys_middleware_1.default.extractSurveyId, surveys_middleware_1.default.validateSurveyExists, permission_middleware_1.default.onlySurveyOwnerOrAdminCanDoThisAction, surveys_middleware_1.default.validateSurveyIsDraft, (0, express_validator_1.body)('_id').not().exists(), (0, express_validator_1.body)('question').isString().isLength({ min: 1, max: 300 }).optional(), (0, express_validator_1.body)('timeout').isInt({ min: 0 }).optional(), (0, express_validator_1.body)('order').not().exists(), (0, express_validator_1.body)('answerOptions').not().exists(), body_validation_middleware_1.default.verifyBodyFieldsErrors, questions_controller_1.default.createQuestion);
        this.app
            .route(`/surveys/:surveyId/questions/reorder`)
            .patch(auth_middleware_1.default.validAuthorizationNeeded(true, false), surveys_middleware_1.default.extractSurveyId, surveys_middleware_1.default.validateSurveyExists, permission_middleware_1.default.onlySurveyOwnerOrAdminCanDoThisAction, surveys_middleware_1.default.validateSurveyIsDraft, (0, express_validator_1.body)('ordering').isObject().exists(), body_validation_middleware_1.default.verifyBodyFieldsErrors, questions_middleware_1.default.isValidQuestionOrdering, questions_controller_1.default.reorderQuestions);
        this.app.param(`questionId`, questions_middleware_1.default.extractQuestionId);
        this.app
            .route(`/surveys/:surveyId/questions/:questionId`)
            .get(auth_middleware_1.default.validAuthorizationNeeded(true, true), surveys_middleware_1.default.extractSurveyId, surveys_middleware_1.default.validateSurveyExists, permission_middleware_1.default.onlySurveyOwnerOrAdminCanDoThisAction, questions_middleware_1.default.validateQuestionExists, questions_controller_1.default.getQuestionById);
        this.app
            .route(`/surveys/:surveyId/questions/:questionId`)
            .delete(auth_middleware_1.default.validAuthorizationNeeded(true, false), surveys_middleware_1.default.extractSurveyId, surveys_middleware_1.default.validateSurveyExists, permission_middleware_1.default.onlySurveyOwnerOrAdminCanDoThisAction, surveys_middleware_1.default.validateSurveyIsDraft, questions_middleware_1.default.validateQuestionExists, questions_controller_1.default.removeQuestion);
        this.app
            .route(`/surveys/:surveyId/questions/:questionId`)
            .put(auth_middleware_1.default.validAuthorizationNeeded(true, false), surveys_middleware_1.default.extractSurveyId, surveys_middleware_1.default.validateSurveyExists, permission_middleware_1.default.onlySurveyOwnerOrAdminCanDoThisAction, surveys_middleware_1.default.validateSurveyIsDraft, questions_middleware_1.default.validateQuestionExists, (0, express_validator_1.body)('_id').not().exists(), (0, express_validator_1.body)('question')
            .isString()
            .isLength({ min: 1, max: 300 })
            .withMessage('Die Frage darf maximal 300 Zeichen lang sein.')
            .optional(), (0, express_validator_1.body)('timeout').isInt({ min: 0 }).optional(), (0, express_validator_1.body)('order').not().exists(), (0, express_validator_1.body)('answerOptions').not().exists(), body_validation_middleware_1.default.verifyBodyFieldsErrors, questions_controller_1.default.put);
        this.app
            .route(`/surveys/:surveyId/questions/:questionId`)
            .patch(auth_middleware_1.default.validAuthorizationNeeded(true, false), surveys_middleware_1.default.extractSurveyId, surveys_middleware_1.default.validateSurveyExists, permission_middleware_1.default.onlySurveyOwnerOrAdminCanDoThisAction, surveys_middleware_1.default.validateSurveyIsDraft, questions_middleware_1.default.validateQuestionExists, (0, express_validator_1.body)('_id').not().exists(), (0, express_validator_1.body)('question')
            .isString()
            .isLength({ min: 1, max: 300 })
            .withMessage('Die Frage darf maximal 300 Zeichen lang sein.')
            .optional(), (0, express_validator_1.body)('timeout').isInt({ min: 0 }).optional(), (0, express_validator_1.body)('order').not().exists(), (0, express_validator_1.body)('answerOptions').not().exists(), body_validation_middleware_1.default.verifyBodyFieldsErrors, surveys_controller_1.default.patch);
        return this.app;
    }
}
exports.QuestionsRoutes = QuestionsRoutes;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicXVlc3Rpb25zLnJvdXRlcy5jb25maWcuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi9xdWVzdGlvbnMvcXVlc3Rpb25zLnJvdXRlcy5jb25maWcudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7Ozs7O0FBQ0EseUVBQWtFO0FBQ2xFLHdHQUErRTtBQUMvRSw4RkFBcUU7QUFDckUsK0ZBQXNFO0FBQ3RFLHlGQUFnRTtBQUNoRSxrR0FBeUU7QUFDekUsdUdBQThFO0FBQzlFLGlIQUF1RjtBQUN2Rix5REFBdUM7QUFDdkMsbUdBQTBFO0FBRTFFLE1BQWEsZUFBZ0IsU0FBUSx5Q0FBa0I7SUFDckQsWUFBWSxHQUFnQjtRQUMxQixLQUFLLENBQUMsR0FBRyxFQUFFLGlCQUFpQixDQUFDLENBQUM7SUFDaEMsQ0FBQztJQUVELGVBQWU7UUFDYixJQUFJLENBQUMsR0FBRzthQUNMLEtBQUssQ0FBQyw4QkFBOEIsQ0FBQzthQUNyQyxHQUFHLENBQ0YseUJBQWMsQ0FBQyx3QkFBd0IsQ0FBQyxJQUFJLEVBQUUsSUFBSSxDQUFDLEVBQ25ELDRCQUFpQixDQUFDLGVBQWUsRUFDakMsNEJBQWlCLENBQUMsb0JBQW9CLEVBQ3RDLCtCQUFvQixDQUFDLHFDQUFxQyxFQUMxRCwyQkFBZ0IsQ0FBQyxxQkFBcUIsRUFDdEMsOEJBQW1CLENBQUMsYUFBYSxDQUNsQzthQUNBLElBQUksQ0FDSCx5QkFBYyxDQUFDLHdCQUF3QixDQUFDLElBQUksRUFBRSxLQUFLLENBQUMsRUFDcEQsNEJBQWlCLENBQUMsZUFBZSxFQUNqQyw0QkFBaUIsQ0FBQyxvQkFBb0IsRUFDdEMsK0JBQW9CLENBQUMscUNBQXFDLEVBQzFELDRCQUFpQixDQUFDLHFCQUFxQixFQUN2QyxJQUFBLHdCQUFJLEVBQUMsS0FBSyxDQUFDLENBQUMsR0FBRyxFQUFFLENBQUMsTUFBTSxFQUFFLEVBQzFCLElBQUEsd0JBQUksRUFBQyxVQUFVLENBQUMsQ0FBQyxRQUFRLEVBQUUsQ0FBQyxRQUFRLENB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